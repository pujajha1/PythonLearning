Q:open a file and read. from there:

with open('/etc/passwd') as f:
 while True:
 line = next(f, None)
 if line is None:
 break
 print(line, end='')
 
 Q:yeild
 
 it is one of the generator function of python.
 >>> it=[1,2,3,4,5]
>>> i=iter(it)
>>> next(i)
1
>>> next(i)
2
>>> next(i)
3
>>> next(i)
4
>>> next(i)
5
>>> next(i)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

The key feature is that a generator function only runs in response to “next” operations
carried out in iteration. Once a generator function returns, iteration stops. However,
the for statement that’s usually used to iterate takes care of these details, so you don’t
normally need to worry about them

Q:REVERSE

>>> for i in it:print(i)
... 
1
2
3
4
5
>>> for i in reversed(it):print(i)
... 
5
4
3
2
1
>>> 

Q: when dealing with index and value of a list:
>>> my_list = ['a', 'b', 'c']
>>> for idx, val in enumerate(my_list):
... print(idx, val)
...
0 a
1 b
2 c

>>> my_list = ['a', 'b', 'c']
>>> for idx, val in enumerate(my_list, 1):
... print(idx, val)
...
1 a
2 b
3 c

data = [ (1, 2), (3, 4), (5, 6), (7, 8) ]
# Correct!
for n, (x, y) in enumerate(data):

Q:going over two list simultane

>>> xpts = [1, 5, 4, 2, 10, 7]
>>> ypts = [101, 78, 37, 15, 62, 99]
>>> for x, y in zip(xpts, ypts):
... print(x,y)
...
1 101
5 78
4 37
2 15
10 62
7 99
>>>



>>> a = [1, 2, 3]
>>> b = ['w', 'x', 'y', 'z']
>>> for i in zip(a,b):
... print(i)
...
(1, 'w')
(2, 'x')
(3, 'y')


>>> for i in zip_longest(a, b, fillvalue=0):
... print(i)
...
(1, 'w')
(2, 'x')
(3, 'y')
(0, 'z')

>>> headers = ['name', 'shares', 'price']
>>> values = ['ACME', 100, 490.1]
>>> s = dict(zip(headers,values))
>>> s
{'name': 'ACME', 'shares': 100, 'price': 490.1}
>>> for name, val in zip(headers, values):
...  print(name, '=', val)
... 
name = ACME
shares = 100
price = 490.1


>>> zip(a, b)
<zip object at 0x1007001b8>
>>> list(zip(a, b))
[(1, 10), (2, 11), (3, 12)]

